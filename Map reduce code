import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class AllTimeHigh {
  	public static class MapClass extends Mapper<LongWritable, Text, Text, DoubleWritable>{
 private Text stock_id = new Text();
 private DoubleWritable High = new DoubleWritable();
 
 public void map(LongWritable key, Text values, Context Context)
 {
	 try {
		 String[] str = values.toString().split(",");
				 double high = Double.parseDouble(str[8]);
		         stock_id.set(str[1]);
		         High.set(high);
		         
		         Context.write(stock_id, High);
	 }
	 catch (Exception e)
	 {
		 System.out.print(e.getMessage());
	 }
 }

 }
}

  public static class ReduceClass  extends Reducer<Text,DoubleWritable,Text DoubleWritable> {
	  
	  
	  private DoubleWritable result = new DoubleWritable();
	  public void reduce (Text key, Iterable<DoubleWritable> values, org.apache.hadoop.mapreduce.Mapper.Context Context) throws IOException, InterruptedException{
		 double maxValue=0;
		 double temp_value=0;
		 
		 for (DoubleWritable value : values) {
			 temp_val = value.get();
			 if (temp_val > max_Value) 
			 {
				 max_Value = temp_val;
			 }
		 }
		 result.set(maxValue);
		 
		Context.write(key, result);
		
		
	  }
   
  }

public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, " ");
    job.setJarByClass(AllTimeHigh.class);
    job.setMapperClass(MapClass.class);
    job.setReducerClass(ReduceClass.class);
    job.setNumReduceTasks(1);
    job.setMapOutputKeyClass(LongWritable.class);
    job.setMapOutputValueClass(Text.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(DoubleWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
